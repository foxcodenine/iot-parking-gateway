services:
  app:
    build:
      context: .
      dockerfile: config/app/Dockerfile
    # image: foxcodenine/iot-parking-gateway_app:latest
    container_name: iot-parking-gateway_app
    ports:
      - "${HTTP_PORT_EX}:${HTTP_PORT}"   
      - "${UDP_PORT_EX}:${UDP_PORT}/udp"  
    volumes:
      - ./public:/root/dist/public/  # (development only) - Mounts the current directory into /app inside the container for live code updates 
    depends_on:
      - postgres
      - redis
      - rabbitmq
    environment:
      # General Application Settings 
      - APP_ROOT_EMAIL=${APP_ROOT_EMAIL}
      - APP_ROOT_PASSWORD=${APP_ROOT_PASSWORD}
      - APP_ROOT_USER=${APP_ROOT_USER}
      - APP_URL=${APP_URL}
      - DEBUG=${DEBUG}
      - GO_ENV=${GO_ENV}

      # Application Ports 
      - HTTP_PORT=${HTTP_PORT}
      - UDP_PORT=${UDP_PORT}

      # Database Configuration 
      - DB_HOST=${DB_HOST}
      - DB_NAME=${DB_NAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}

      # Redis Configuration 
      - REDIS_DB=${REDIS_DB}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PREFIX=${REDIS_PREFIX}

      # RabbitMQ Configuration 
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USER=${RABBITMQ_USER}

      # Settings      
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - DEVICE_ACCESS_MODE=${DEVICE_ACCESS_MODE}
      - DEFAULT_LATITUDE=${DEFAULT_LATITUDE}
      - DEFAULT_LONGITUDE=${DEFAULT_LONGITUDE}
      - JWT_EXPIRATION_TIME=${JWT_EXPIRATION_TIME}
      - REDIS_DEFAULT_TTL=${REDIS_DEFAULT_TTL}
      - GOOGLE_MAP_ID=${GOOGLE_MAP_ID}

    networks:
      - app-network  

# ----------------------------------------------------------------------

  postgres:
    image: timescale/timescaledb:latest-pg14
    container_name: iot-parking-gateway_postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT_EX}:${DB_PORT}"  
    volumes:
      # Mount initialization scripts for setting up schema and tables
      - ./initdb-scripts:/docker-entrypoint-initdb.d
      # - postgres-data:/var/lib/postgresql/data  # (production) - Persistent data storage for production 
      - /srv/docker/bind-mounts/iot-parking-gateway/postgres-data/:/var/lib/postgresql/data/  # (development only) - Bind mount for dev, enables direct file access on host
    networks:
      - app-network  
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -h localhost -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

# ----------------------------------------------------------------------

  redis:  
    image: redislabs/rebloom:latest  
    container_name: iot-parking-gateway_redis

    ports:
      - "${REDIS_PORT_EX}:${REDIS_PORT}"  
    command: >
      sh -c "redis-server 
      --loadmodule /usr/lib/redis/modules/redisbloom.so
      --requirepass ${REDIS_PASSWORD}
      --loglevel warning 
      --bind 0.0.0.0
      --appendonly no
      --save 300 1
      --dir /data "

    # Run as privileged to allow the container to change the vm.overcommit_memory setting
    privileged: true

    volumes:
      # - redis-data:/data  # (production) Persistent Redis storage for production
      - /srv/docker/bind-mounts/iot-parking-gateway/redis-data/:/data  # (development only) - Bind mount for dev, enables direct file access on host
    networks:
      - app-network  


# ----------------------------------------------------------------------

  rabbitmq:
    image: rabbitmq:3-management
    container_name: iot-parking-gateway_rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    ports:
      - "${RABBITMQ_PORT_EX}:${RABBITMQ_PORT}"     
      - "${RABBITMQ_PORT_WEB_EX}:${RABBITMQ_PORT_WEB}"   
    networks:
      - app-network  # Connects RabbitMQ to the shared network for internal communication


# ----------------------------------------------------------------------

  pgweb:
    container_name: iot-parking-gateway_pgweb
    # restart: always
    image: sosedoff/pgweb
    ports:
      - "${PGWEB_PORT_EX}:${PGWEB_PORT}"  
    links:
      - postgres:postgres
    # environment:
      # - DATABASE_URL=postgres://${DB_USER}:${DB_PASSWORD}@postgres:${DB_PORT}/${DB_NAME}?sslmode=disable&search_path=parking
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network




# ----------------------------------------------------------------------

# For production, use Docker volumes for persistence:
# volumes:
#   postgres-data:  # Uncomment this line in production to enable persistent PostgreSQL storage     
#   redis-data:     # Uncomment this line in production to enable persistent Redis storage

# ----------------------------------------------------------------------

networks:
  app-network:
    driver: bridge  # Creates an isolated network for inter-service communication
