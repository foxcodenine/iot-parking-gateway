services:
  app:
    build:
      context: .
      dockerfile: config/app/Dockerfile
    # image: foxcodenine/iot-parking-gateway_app:latest
    container_name: iot-parking-gateway_app
    ports:
      - "${HTTP_PORT_EX}:${HTTP_PORT}"  # Maps HTTP_PORT from the .env file to the container
      - "${UDP_PORT_EX}:${UDP_PORT}/udp"  # Maps UDP_PORT from the .env file to the container for UDP traffic
    volumes:
      - .:/app  # (development only) - Mounts the current directory into /app inside the container for live code updates 
    depends_on:
      - postgres
      - redis
      - rabbitmq
    environment:
      - GO_ENV=${GO_ENV}
      - APP_URL=${APP_URL}
      - DEBUG=${DEBUG}

      - HTTP_PORT=${HTTP_PORT}

      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      
      - UDP_PORT=${UDP_PORT}

      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=${REDIS_DB}
      - REDIS_PREFIX=${REDIS_PREFIX}  

      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}

      - GOOGLE_API_KEY=${GOOGLE_API_KEY}

    networks:
      - app-network  # Connects app to the shared network for internal communication

# ----------------------------------------------------------------------

  postgres:
    image: timescale/timescaledb:latest-pg14
    container_name: iot-parking-gateway_postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT_EX}:${DB_PORT}"  # Maps DB_PORT from the .env file to the container
    volumes:
      # Mount initialization scripts for setting up schema and tables
      - ./initdb-scripts:/docker-entrypoint-initdb.d
      # - postgres-data:/var/lib/postgresql/data  # (production) - Persistent data storage for production 
      - /srv/docker/bind-mounts/iot-parking-gateway/postgres-data/:/var/lib/postgresql/data/  # (development only) - Bind mount for dev, enables direct file access on host
    networks:
      - app-network  # Connects PostgreSQL to the shared network for internal communication

# ----------------------------------------------------------------------

  redis:  
    image: redislabs/rebloom:latest  
    container_name: iot-parking-gateway_redis

    ports:
      - "${REDIS_PORT_EX}:${REDIS_PORT}"  # Maps Maps REDIS_PORT from the .env file to the container
    command: >
      sh -c "redis-server 
      --loadmodule /usr/lib/redis/modules/redisbloom.so
      --requirepass ${REDIS_PASSWORD}
      --loglevel warning 
      --bind 0.0.0.0
      --appendonly no
      --save 300 1
      --dir /data "

    # Run as privileged to allow the container to change the vm.overcommit_memory setting
    privileged: true

    volumes:
      # - redis-data:/data  # (production) Persistent Redis storage for production
      - /srv/docker/bind-mounts/iot-parking-gateway/redis-data/:/data  # (development only) - Bind mount for dev, enables direct file access on host
    networks:
      - app-network  # Connects Redis to the shared network for internal communication

# ----------------------------------------------------------------------

  rabbitmq:
    image: rabbitmq:3-management
    container_name: iot-parking-gateway_rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    ports:
      - "${RABBITMQ_PORT_EX}:${RABBITMQ_PORT}"     # Maps port 45672 on the host to port 5672 in the container for RabbitMQ
      - "${RABBITMQ_PORT_WEB_EX}:${RABBITMQ_PORT_WEB}"   # Maps port 4515672 on the host to RabbitMQ management interface (port 15672 in the container)
    networks:
      - app-network  # Connects RabbitMQ to the shared network for internal communication


# ----------------------------------------------------------------------

  pgweb:
    container_name: iot-parking-gateway_pgweb
    # restart: always
    image: sosedoff/pgweb
    ports:
      - "8081:8081"  # Exposes pgweb on localhost:8081
    links:
      - postgres:postgres
    # environment:
      # - DATABASE_URL=postgres://${DB_USER}:${DB_PASSWORD}@postgres:${DB_PORT}/${DB_NAME}?sslmode=disable&search_path=parking
    depends_on:
      - postgres
    networks:
      - app-network




# ----------------------------------------------------------------------

# For production, use Docker volumes for persistence:
# volumes:
#   postgres-data:  # Uncomment this line in production to enable persistent PostgreSQL storage     
#   redis-data:     # Uncomment this line in production to enable persistent Redis storage

# ----------------------------------------------------------------------

networks:
  app-network:
    driver: bridge  # Creates an isolated network for inter-service communication
